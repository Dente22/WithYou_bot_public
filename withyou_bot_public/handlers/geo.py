from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from city_letters import save_direct_letter, get_latest_direct_letter
from geobase import has_geo_consent, save_geo_consent, save_user_location, get_nearby_users
from utils.history import push

def handle(bot, user_last_topic):
    @bot.message_handler(func=lambda m: m.text == "üìç –•–æ—á—É –Ω–∞–π—Ç–∏ –∫–æ–≥–æ-—Ç–æ —Ä—è–¥–æ–º")
    def geo_entry(message: Message):
        from menu import main_menu
        user_id = message.from_user.id
        push(user_id, "geo:entry")

        if not has_geo_consent(user_id):
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", "‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
            bot.send_message(
                message.chat.id,
                "üîí *–ú—ã —É–≤–∞–∂–∞–µ–º —Ç–≤–æ—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.*\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—é–¥–µ–π —Ä—è–¥–æ–º, –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.",
                parse_mode="Markdown",
                reply_markup=markup
            )
            return

        bot.send_message(
            message.chat.id,
            "–¢—ã —É–∂–µ –¥–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ üôå –í–æ—Ç –º–µ–Ω—é:",
            reply_markup=main_menu(user_id)
        )

    @bot.message_handler(func=lambda m: m.text == "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω")
    def consent_granted(message: Message):
        from menu import main_menu
        push(message.from_user.id, "geo:consent")
        save_geo_consent(message.from_user.id)
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–≥–æ-—Ç–æ —Ä—è–¥–æ–º üôå",
            reply_markup=main_menu(message.from_user.id)
        )

    @bot.message_handler(func=lambda m: m.text == "‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
    def consent_denied(message: Message):
        from menu import main_menu
        push(message.from_user.id, "geo:deny")
        bot.send_message(
            message.chat.id,
            "–•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ —Å–Ω–æ–≤–∞ ¬´üìç –•–æ—á—É –Ω–∞–π—Ç–∏ –∫–æ–≥–æ-—Ç–æ —Ä—è–¥–æ–º¬ª",
            reply_markup=main_menu(message.from_user.id)
        )

    @bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    def update_location(message: Message):
        request_location(message)

    @bot.message_handler(content_types=['location'])
    def handle_location(message: Message):
        from menu import main_menu
        push(message.from_user.id, "geo:location")
        if message.location:
            save_user_location(
                message.from_user.id,
                message.location.latitude,
                message.location.longitude
            )
            bot.send_message(
                message.chat.id,
                "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                reply_markup=main_menu(message.from_user.id)
            )

    def request_location(message: Message):
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
        bot.send_message(
            message.chat.id,
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
            reply_markup=markup
        )

    @bot.message_handler(func=lambda m: m.text == "üë• –õ—é–¥–∏ —Ä—è–¥–æ–º")
    def show_nearby_users(message: Message):
        push(message.from_user.id, "geo:nearby")
        users = get_nearby_users(message.from_user.id)
        if not users:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ —Ä—è–¥–æ–º üòî")
            return

        for user in users:
            info = (
                f"üßç –ö—Ç–æ-—Ç–æ —Ä—è–¥–æ–º\n"
                f"üìç –ì–æ—Ä–æ–¥: {user['city']}\n"
                f"üí¨ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user['state']}\n"
                f"üìÖ –ö–æ–≥–¥–∞: {user['date']}"
            )
            inline = InlineKeyboardMarkup()
            inline.add(InlineKeyboardButton("‚úâ –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", callback_data=f"write_{user['user_id']}"))
            bot.send_message(message.chat.id, info, reply_markup=inline)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("write_"))
    def handle_write_letter(call):
        recipient_id = int(call.data.split("_")[1])
        sender_id = call.from_user.id
        push(sender_id, f"geo:write:{recipient_id}")

        def save_and_notify(message: Message):
            text = message.text
            save_direct_letter(recipient_id, sender_id, text)
            bot.send_message(sender_id, "‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            bot.send_message(recipient_id, "üì® –¢—ã –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ! –ù–∞–∂–º–∏ ¬´üì© –ü–∏—Å—å–º–æ –æ—Ç —Ç–æ–≥–æ –∫—Ç–æ —Ä—è–¥–æ–º¬ª")

        bot.send_message(call.message.chat.id, "‚úç –ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ:")
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, save_and_notify)

    @bot.message_handler(func=lambda m: m.text == "üì© –ü–∏—Å—å–º–æ –æ—Ç —Ç–æ–≥–æ –∫—Ç–æ —Ä—è–¥–æ–º")
    def read_direct_letter(message: Message):
        user_id = message.from_user.id
        push(user_id, "geo:read_letter")
        result = get_latest_direct_letter(user_id)

        if result:
            sender_id, text, date = result
            bot.send_message(
                message.chat.id,
                f"üì¨ –ü–∏—Å—å–º–æ –¥–ª—è —Ç–µ–±—è:\n\n{text}\n\nüßç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –∫—Ç–æ-—Ç–æ —Ä—è–¥–æ–º\nüïí –î–∞—Ç–∞: {date}"
            )
        else:
            bot.send_message(message.chat.id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–∏—Å–µ–º –¥–ª—è —Ç–µ–±—è. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏.")
