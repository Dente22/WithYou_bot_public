# support_stub.py
# ü§ù –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: –ø–∏—Å—å–º–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—É

from telebot import types
from utils.history import push
from utils.letters_db import init_db, save_letter, get_random_letter, save_reply, get_letter_author

init_db()  # [Stub] –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–∏—Å–µ–º

letter_options = ["üìù –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", "üì© –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∏—Å—å–º–æ"]
pending_reply = {}

def handle(bot, user_last_topic):
    @bot.message_handler(func=lambda msg: msg.text == "—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º?")
    def handle_support(message):
        user_last_topic[message.chat.id] = ("support", None)
        push(message.chat.id, "support")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*letter_options)
        markup.add("‚¨Ö –ù–∞–∑–∞–¥", "üè† –ú–µ–Ω—é")
        bot.send_message(message.chat.id, "[Stub] –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

    @bot.message_handler(func=lambda msg: msg.text == "üìù –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ")
    def handle_write_letter(message):
        msg = bot.send_message(message.chat.id, "[Stub] –ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü—É:")
        bot.register_next_step_handler(msg, save_user_letter)

    def save_user_letter(message):
        save_letter(message.text, message.chat.id)
        bot.send_message(message.chat.id, "[Stub] –ü–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    @bot.message_handler(func=lambda msg: msg.text == "üì© –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∏—Å—å–º–æ")
    def handle_read_letter(message):
        result = get_random_letter()
        if result:
            letter_id, content = result
            pending_reply[message.chat.id] = letter_id
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("‚úç –û—Ç–≤–µ—Ç–∏—Ç—å", "‚¨Ö –ù–∞–∑–∞–¥", "üè† –ú–µ–Ω—é")
            bot.send_message(message.chat.id, f"[Stub] –ü–∏—Å—å–º–æ:\n\n{content}", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "[Stub] –ü–∏—Å–µ–º –ø–æ–∫–∞ –Ω–µ—Ç.")

    @bot.message_handler(func=lambda msg: msg.text == "‚úç –û—Ç–≤–µ—Ç–∏—Ç—å")
    def handle_reply_prompt(message):
        if message.chat.id not in pending_reply:
            bot.send_message(message.chat.id, "[Stub] –ù–µ—Ç –ø–∏—Å—å–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
            return

        msg = bot.send_message(message.chat.id, "[Stub] –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç:")
        bot.register_next_step_handler(msg, lambda m: save_letter_reply(bot, m))

    def save_letter_reply(bot, message):
        letter_id = pending_reply.pop(message.chat.id, None)
        if letter_id:
            reply_text = message.text
            save_reply(letter_id, reply_text)

            author_chat_id = get_letter_author(letter_id)
            if author_chat_id:
                try:
                    bot.send_message(author_chat_id, f"[Stub] –ö—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ—ë –ø–∏—Å—å–º–æ:\n\n{reply_text}")
                except Exception as e:
                    print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

            bot.send_message(message.chat.id, "[Stub] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "[Stub] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")
